/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(analizadorLexico)
public class analizadorLexico{  public static void main(String args []) throws ParseException  {    analizadorLexico parser = new analizadorLexico(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        switch (analizadorLexico.one_line())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        analizadorLexico.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(analizadorLexico)SKIP : {
   "/*" : comentario
}

<comentario> SKIP: {
   "*/" : DEFAULT | <~[]>
}

TOKEN : /* OPERADORES */
{
  < ADD : "+" >
| < SUB : "-" >
| < MULT : "*" >
| < DIV : "/" >
| < POT : "**" >
| < MOD : "%" >
| < ATRIB : "=" >
| < CONCAT : "++" >
}

TOKEN : /* OPERADORES LOGICOS */
{
  < MAIOR : ">" >
| < MENOR : "<" >
| < MAIOR_I : ">=" >
| < MENOR_I : "<=" >
| < IGUAL : "==" >
| < AND : "E" >
| < OR : "O" >
| < NOT : "N" >
| < ANDS : "EE" >
}

TOKEN : /* IDENTIFICADORES */
{
  < IF : "SE" >
| < ELSE : "SENAO" >
| < FOR : "LACO" >
| < VIRG : "," >
| < PT_VIRG : ";" >
| < AP : "(" >
| < FP : ")" >
| < ACH : "{" >
| < FCH : "}" >
| < IN : "PRINTA" >
| < OUT : "PEGA" >
| < TEST : "TESTE" >
| < COMENT : "//"(~["\n"])*"\n" >
}

TOKEN : /* IDENTIFICADORES DAS VARIAVEIS */
{
  < TYPENUM : "FLUT" >
| < TYPESTR : "BOOL" >
| < TYPEBOOL : "STRING" >
}

TOKEN : /* POSSIVEIS VALORES PARA AS VARIAVEIS */
{
  < NUMERO : ([ "0"-"9" ])*(".")?([ "0"-"9" ])+ >
| < STRING : "\""(~["\""])*"\"" >
| < BOOL : "true" | "false" >
}

TOKEN : /* TOKENS ADICIONAIS */
{
  < BREAK : "SAIDA" >
| < OTHERWISE : " OUTROCASO" >
| < VAR : "(['a'-'z'])+((['0'-'9'])|(['a'-'z']))*" >
}
int one_line() :{}{  sum() ";"  {    return 0;  }| ";"  {    return 1;  }}void sum() :{}{  term()  (    (      < ADD >    | < SUB >    )    term()  )*}void term() :{}{  unary()  (    (      < MULT >    | < DIV >    )    unary()  )*}void unary() :{}{  < SUB > element()| element()}void element() :{}{  < NUMERO >| "(" sum() ")"}



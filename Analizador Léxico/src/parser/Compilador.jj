/* Compilador Hell */
options {
   DEBUG_PARSER = true;
   DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(CompiladorHell)
package parser;
import java.io.*;
public class CompiladorHell {
   public static void main(String args[]) throws ParseException {
      CompiladorHell analisador = null;
      try {
         analisador = new CompiladorHell(new FileInputStream("prog_fonte01.lek"));
         CompiladorHell.inicio();
         System.out.println("Análise léxica e sintática sem erros!");
      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo não encontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("Erro léxico\n" + e.getMessage());
      }
      catch(ParseException e) {
         System.out.println("Erro sintático\n" + e.getMessage());
      }
   }
}
PARSER_END(CompiladorHell)


SKIP :
{
  " " | "\r" | "\t" | "\n"
}

SKIP : { "/*" : comentarioGeral }
<comentarioGeral> SKIP: { "*/" : DEFAULT | <~[]> }

TOKEN : /* OPERADORES ARITMÉTICOS */
{
  < ADD : "+" >
| < SUB : "-" >
| < MULT : "*" >
| < DIV : "/" >
| < POT : "**" >
| < MOD : "%" >
}

TOKEN : /* OPERADOR DE STRING */
{
 < CONCAT : "++" >
}

TOKEN : /* OPERADORES LOGICOS E RELACIONAIS */
{
  < MAIOR : ">" >
| < MENOR : "<" >
| < MAIOR_I : ">=" >
| < MENOR_I : "<=" >
| < IGUAL : "==" >
| < DIF : "!=" >
| < AND : "E" >
| < OR : "O" >
| < NOT : "N" >
| < ANDS : "EE" >
}

TOKEN : /* PALAVRAS RESERVADAS */
{
  < IF : "SE" >
| < ELSE : "SENAO" >
| < FOR : "LACO" >
| < IN : "PEGA" >
| < OUT : "PRINTA" >
| < TEST : "TESTE" >
| < BREAK : "SAIDA" >
| < OTHERWISE : "OUTROCASO" >
| < FORMULTIPLE : "LACOMULTIPLO" >
| < FORMATRIX : "LACOMATRIX" >
| < TO : "A" >
| < STEP : "PASSO" >
}

TOKEN : /* SIMBOLOS */
{
  < VIRG : "," >
| < PT_VIRG : ";" >
| < AP : "(" >
| < FP : ")" >
| < ACH : "{" >
| < FCH : "}" >
|  < ATRIB : "=" >
}

TOKEN : /* TIPOS */
{
  < TYPENUM : "FLUT" >
| < TYPESTR : "STRING" >
| < TYPEBOOL : "BOOL" >
}

TOKEN : /* CONSTANTES */
{
  < NUM : ([ "0"-"9" ])*(".")?([ "0"-"9" ])+ >
| < STRING : "\""(~["\""])*"\"" >
| < BOOL : "true" | "false" >
}

TOKEN : /* VARIAVEL */
{
  < VAR : (["a"-"z"])+ >
}

TOKEN : /* COMENTARIO OBRIGATÓRIO */
{
  < COMENT : "//" (~[])* "." >
}

/*
inicio        -> listaComandos() <EOF>
listaComandos -> (comando())* 
comando       -> 
	|comandoDeclaracoVariavel()
	|comandoAtribuicao()
	|comandoEntrada()
	|comandoPrinta()
	|comandoSe()
	|comandoTeste()
	|comandoLaco()
	|comandoLacoMultiplo()
	|comandoLacoMatrix()
*/
void inicio() : {} {
	listaComandos() <EOF>
}
void listaComandos() : {} {
	(comando())* 
}
void comando() : {} {
	  comandoDeclaracaoVariavel()
    |
      comandoAtribuicao()
    |
      comandoPrinta()
    |
      comandoPega()
	|
	  comandoSe()
	|
	  comandoTeste()
	|
	  comandoLaco()
	|
	  comandoLacoMultiplo()
	|
	  comandoLacoMatrix()
}

/*
comandoDeclaracaoVariavel ->
    (
      <TYPENUM> <VAR> (<ATRIB> <NUM>)?
     ( <VIRG> <VAR> (<ATRIB> <NUM>)? )*
    | 
    <TYPESTR> <VAR> (<ATRIB> <STRING>)?
     ( <VIRG> <VAR> (<ATRIB> <STRING>)? )*
    | 
    <TYPEBOOL> <VAR> (<ATRIB> <BOOL>)?
     ( <VIRG>  <VAR> (<ATRIB> <BOOL>)? )*
    )
    <COMENT>	
*/

void comandoDeclaracaoVariavel() : {}
{
   (
     <TYPENUM> <VAR> (<ATRIB> <NUM>)?
     ( <VIRG> <VAR> (<ATRIB> <NUM>)? )*
   | 
     <TYPESTR> <VAR> (<ATRIB> <STRING>)?
     ( <VIRG> <VAR> (<ATRIB> <STRING>)? )*
   | 
     <TYPEBOOL> <VAR> (<ATRIB> <BOOL>)?
     ( <VIRG>  <VAR> (<ATRIB> <BOOL>)? )*
   )
   <COMENT>	
}

/*
comandoAtribuição ->  <VAR><ATRIB> exp <COMENT>
exp               ->  expLogica | expAritmetica | expString
*/
void comandoAtribuicao() : { }
{
    <VAR> <ATRIB>
    exp()
    <COMENT>
}

/*
comandoPrinta -> <OUT> <AP>
                 exp ((<VIRG>|<PT_VIRG>) exp)*
                 <FP> <COMENT>
*/
void comandoPrinta ():{}
{
	<OUT> <AP> exp()
	(
		(
		  <VIRG> | <PT_VIRG>
		)
		exp()
	)*
    <FP>
	<COMENT>
}

/*
comandoPega -> <IN><AP><VAR>(<VIRG><VAR>)*<FP><COMENT>
*/
void comandoPega (): {}
{
	<IN><AP><VAR>
	(
	  <VIRG><VAR>
	)*
	<FP><COMENT>	
}

/*
comandoSe -> <IF><AP> exp <FP>
             <ACH><COMENT>
             listaComandos <FCH>
             (<ELSE><ACH><COMENT>
             listaComandos <FCH>)?
*/
void comandoSe() : {}
{  
	<IF><AP> exp() <FP><ACH><COMENT>
	listaComandos() <FCH>
	(
	  <ELSE><ACH><COMENT>
	  listaComandos()
	  <FCH>
	)?
}

/*
comandoTeste() -> <TEST><ACH> (	blocoCondicional )+
            	  ( <OTHERWISE><ACH>
			        listaComandos()
			        <FCH> <COMENT>
		          )? <FCH>

blocoCondicional -> <AP> exp <FP>
                    <ACH> listaComandos()
	                <FCH> (<BREAK>)? <COMENT>
*/
void comandoTeste(): {}{
	<TEST><ACH>
	(
		blocoCondicional()
	)+

	(
		<OTHERWISE><ACH>
	    listaComandos()
	    <FCH> <COMENT>
	)?
	<FCH>
}

void blocoCondicional():{}
{
	<AP> exp() <FP> <ACH> 
    listaComandos()
	<FCH>
	(<BREAK>)? <COMENT>
}


/*
comandoLaco -> <FOR> <AP> (<TYPENUM>)? <VAR><ATRIB>
               exp <PT_VIRG>
               exp <PT_VIRG>
               comandoAtribuicao <FP>
               <ACH> <COMENT> listaComandos <FCH>
*/
void comandoLaco () : {}
{
    <FOR> <AP>
    (
      <TYPENUM>
    )?
    <VAR><ATRIB> exp() <PT_VIRG>
    exp()
    <PT_VIRG> 
    comandoAtribuicao()
    <FP>
    <ACH> <COMENT>
    listaComandos() <FCH>
}


/*
comandoLacoMultiplo -> <FOR_MULTIPLE> <AP> inicioLaco <FP>
                <ACH> <COMENT> listaComandos <FCH>
inicioLaco   -> <VAR> contLaco faixa
contLaco     -> <VIRG> <VAR> contLaco faixa <VIRG>
               | <PT_VIRG>
faixa -> exp <TO> exp
        (<STEP> exp)?
*/
void comandoLacoMultiplo() : {}
{
	<FORMULTIPLE> <AP>
	inicioLaco()
	<FP>
	<ACH> <COMENT>
	listaComandos()
	<FCH>
}
void inicioLaco() : {}
{
	<VAR> contLaco() faixa()
}
void contLaco() : {}
{
	<VIRG> <VAR> contLaco() faixa() <VIRG> 
	|
	<PT_VIRG>
}
void faixa() : {}
{
	exp()
	<TO>
	exp()
	(
	    <STEP> exp()
	)?
}

/*
comandoLacoMatrix -> <FORMATRIX> <AP> <VAR>
                    (<VIR> <VAR>)*
	                <PT_VIRG> faixa <FP>
	                <ACH> <COMENT>
	                listaComandos <FCH>	
faixa -> expAritmetica <TO> expAritmetica
        (<STEP> expAritmetica)?
*/
void comandoLacoMatrix() : {} 
{
      <FORMATRIX> <AP> <VAR>
      (
        <VIRG> <VAR>
      )*
      <PT_VIRG>
      faixa()
      <FP>
      <ACH> <COMENT>
      listaComandos()
      <FCH>
}

/*
exp           -> expAnd   ( <OR>  expAnd )*
expAnd        -> expNot   ( <AND> expNot )*
expNot        -> ( <NOT> )* expRelacional
expRelacional -> expAdit  ( <MAIOR>   expAdit | <MENOR>   expAdit 
                          | <MAIOR_I> expAdit | <MENOR_I> expAdit |
                          | <IGUAL>   expAdit | <DIF>     expAdit )*
expAdit       -> expMult  ( <ADD>  expMult | <SUB> expMult  )*
expMult       -> expPot   ( <MULT> expPot  | <DIV> expPot )*
expPot        -> expToken ( <POT> expPot )?
expToken      -> <NUM> | <ADD><NUM> | <SUB><NUM> | <VAR> | <BOOL> | <STRING> 
                 | <AP> exp <FP>
*/
void exp() : {}
{
    expAnd()
    (
      <OR> expAnd()
    )*
}
void expAnd() : {}
{
    expNot()
    (
       <AND> expNot()
    )*
}
void expNot() : {}
{
    (
       <NOT>
    )*
    expRelacional()
}
void expRelacional() : {}
{
   expAdit()
   (
       <MAIOR>   expAdit()
       
     |
       <MENOR>   expAdit()
       
     |
       <MAIOR_I> expAdit()
       
     |
       <MENOR_I> expAdit()
       
     |
       <IGUAL>   expAdit()
       
     |
       <DIF>     expAdit()  
   )*
}
void expAdit() : {}
{
	expMult()
	(
	  <ADD> expMult()
	  |
	  <SUB> expMult()
	 )*
}  
void expMult() : {}
{
	expPot()
	(
	   <MULT> expPot()
	 |
	   <DIV>  expPot()
	)*
}
void expPot() : {}
{
	expToken()
	(
	  <POT> expPot()
	)?
}
void expToken() :{}
{
      <NUM>
    |
      <ADD><NUM>
    |
      <SUB><NUM>
    |
      <VAR>
    |
      <BOOL> 
    |
      <STRING> 
    |
      <AP> exp() <FP>
}

/* Compilador Hell */

options {
   DEBUG_PARSER        = false;
   DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(CompiladorHell) 
package parser;

import java.io.*;
import apoio.*;
import semantico.*;
import intermediario.*;

public class CompiladorHell {
   
   public static Tabela tabela = new Tabela();
   
   public static void main(String args[]) throws ParseException {
      
      CompiladorHell analisador = null;
      try {
         analisador = new CompiladorHell(new FileInputStream(Config.nomeArquivoFonte));

		 // 1a passagem do Compilador
         ListaComandos listaComandos1aPassagem;
         listaComandos1aPassagem = CompiladorHell.inicio();
         System.out.println("Analise lexica e sintatica sem erros!");
		 System.out.println("\nTabela de simbolos: "+tabela);
         System.out.println("\nLista completa dos comandos da 1a passagem do compilador: "
                             +listaComandos1aPassagem);

		 // 2a passagem do Compilador 
		 PrimitivoListaComandos listaComandos2aPassagem;
		 listaComandos2aPassagem = listaComandos1aPassagem.geraListaPrimitivoComando();
		 System.out.println("\nLista completa dos comandos da 2a passagem do compilador: "
		                    +listaComandos2aPassagem);
          
      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo nao encontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("Erro lexico\n" + e.getMessage());
      }
      catch(ParseException e) {
         System.out.println("Erro sintatico\n" + e.getMessage());
      }
   }
}

PARSER_END(CompiladorHell)

SKIP :
{
  " " | "\r" | "\t" | "\n"
}

SKIP : { "/*" : comentarioGeral }
<comentarioGeral> SKIP: { "*/" : DEFAULT | <~[]> }

TOKEN : /* OPERADORES ARITMï¿½TICOS */
{
  < ADD : "+" >
| < SUB : "-" >
| < MULT : "*" >
| < DIV : "/" >
| < POT : "**" >
| < MOD : "%" >
}

TOKEN : /* OPERADOR DE STRING */
{
 < CONCAT : "++" >
}

TOKEN : /* OPERADORES LOGICOS E RELACIONAIS */
{
  < MAIOR : ">" >
| < MENOR : "<" >
| < MAIOR_I : ">=" >
| < MENOR_I : "<=" >
| < IGUAL : "==" >
| < DIF : "!=" >
| < AND : "E" >
| < OR : "O" >
| < NOT : "N" >
| < ANDS : "EE" >
}

TOKEN : /* PALAVRAS RESERVADAS */
{
  < IF : "SE" >
| < ELSE : "SENAO" >
| < FOR : "LACO" >
| < IN : "PEGA" >
| < OUT : "PRINTA" >
| < TEST : "TESTE" >
| < BREAK : "SAIDA" >
| < OTHERWISE : "OUTROCASO" >
| < FORMULTIPLE : "LACOMULTIPLO" >
| < FORMATRIX : "LACOMATRIX" >
| < TO : "A" >
| < STEP : "PASSO" >
}

TOKEN : /* SIMBOLOS */
{
  < VIRG : "," >
| < PT_VIRG : ";" >
| < AP : "(" >
| < FP : ")" >
| < ACH : "{" >
| < FCH : "}" >
|  < ATRIB : "=" >
}

TOKEN : /* TIPOS */
{
  < TYPENUM : "FLUT" >
| < TYPESTR : "STRING" >
| < TYPEBOOL : "BOOL" >
}

TOKEN : /* CONSTANTES */
{
  < NUM : ([ "0"-"9" ])*(".")?([ "0"-"9" ])+ >
| < STRING : "\""(~["\""])*"\"" >
| < BOOL : "true" | "false" >
}

TOKEN : /* VARIAVEL */
{
  < VAR : (["a"-"z"])+ >
}

TOKEN : /* COMENTARIO OBRIGATORIO */
{
  < COMENT : "//" (~["."])* "." >
}

/*
inicio        -> listaComandos() <EOF>
listaComandos -> (comando())* 
comando       -> 
	|comandoDeclaracoVariavel()
	|comandoAtribuicao()
	|comandoEntrada()
	|comandoPrinta()
	|comandoSe()
	|comandoTeste()
	|comandoLaco()
	|comandoLacoMultiplo()
	|comandoLacoMatrix()
*/
ListaComandos inicio() : { ListaComandos lista = ListaComandos(); } {
	lista = listaComandos() <EOF>
	{
	   return lista;
    }	
}
ListaComandos listaComandos() : { Comando com; ListaComandos lista = ListaComandos(); } {
	(
	   com = comando()
	   {
	      lista.add(com);	   }
	)*
	{	   return lista;
    }
}
Comando comando() : {Comando com;} {
	  com = comandoDeclaracaoVariavel()
    |
      com = comandoAtribuicao()
    |
      com = comandoPrinta()
    |
      com = comandoPega()
	|
	  com = comandoSe()
	|
	  com = comandoTeste()
	|
	  com = comandoLaco()
	|
	  com = comandoLacoMultiplo()
	|
	  com = comandoLacoMatrix()
}

/*
comandoDeclaracaoVariavel ->
    (
      <TYPENUM> <VAR> (<ATRIB> <NUM>)?
     ( <VIRG> <VAR> (<ATRIB> <NUM>)? )*
    | 
    <TYPESTR> <VAR> (<ATRIB> <STRING>)?
     ( <VIRG> <VAR> (<ATRIB> <STRING>)? )*
    | 
    <TYPEBOOL> <VAR> (<ATRIB> <BOOL>)?
     ( <VIRG>  <VAR> (<ATRIB> <BOOL>)? )*
    )
    <COMENT>	
*/

void comandoDeclaracaoVariavel() : {Simbolo simb; Token var;}
{
   (
     <TYPENUM>
     var=<VAR>
     {
		   simb = new Simbolo(var.image, Tipo.VAR_NUMERO);
	       CompiladorHell.tabela.inclui(simb);
	 }
     (
       <ATRIB>
       <NUM>
     )?
     (
       <VIRG>
       var=<VAR>
       {
		   simb = new Simbolo(var.image, Tipo.VAR_NUMERO);
	       CompiladorHell.tabela.inclui(simb);
	   }
       (
         <ATRIB>
         <NUM>
       )?
      )*
   | 
     <TYPESTR>
     var=<VAR>
     {
		   simb = new Simbolo(var.image, Tipo.VAR_STRING);
	       CompiladorHell.tabela.inclui(simb);
	 }
     (
       <ATRIB>
       <STRING>
     )?
     (
       <VIRG>
       var=<VAR>
       {
		  simb = new Simbolo(var.image, Tipo.VAR_STRING);
	       CompiladorHell.tabela.inclui(simb);
	   }
       (
         <ATRIB>
         <STRING>
       )?
     )*
   | 
     <TYPEBOOL>
     var=<VAR>
     {
		  simb = new Simbolo(var.image, Tipo.VAR_BOOLEANO);
	       CompiladorHell.tabela.inclui(simb);
	 }
     (
       <ATRIB>
       <BOOL>
     )?
     (
       <VIRG>
       var=<VAR>
       {
		  simb = new Simbolo(var.image, Tipo.VAR_BOOLEANO);
	      CompiladorHell.tabela.inclui(simb);
	   }
       (
         <ATRIB>
         <BOOL>
       )?
     )*
   )
   <COMENT>	
}

/*
comandoAtribuicao ->  <VAR><ATRIB> exp <COMENT>
exp               ->  expLogica | expAritmetica | expString
*/
Comando comandoAtribuicao() : {ComandoAtribuicao atrib; Token var; Expressao expa;}
{
    var=<VAR>
    <ATRIB>
    expa = exp()
    {
      atrib = new ComandoAtribuicao(var.image, expa);
    }
    <COMENT>
    {
	return atrib;
    }
}


/*
comandoPrinta -> <OUT> <AP>
                 exp ((<VIRG>|<PT_VIRG>) exp)*
                 <FP> <COMENT>
*/
Comando comandoPrinta ():{ComandoPrinta printa; Expressao expa;}
{
	<OUT>
	try {
		<AP>
	}
	catch(ParseException e) {
		RecuperacaoErro.recuperaErroPanico(CompiladorHellConstants.COMENT, "abre parenteses");
		return null;
	}
	expa = exp()
	{
	  printa = new ComandoPrinta(expa);
	}
	(
	  	(
			<VIRG> | <PT_VIRG>
		)
		expa = exp()
		{
		  printa.addExpressao(expa);
		}
	)*
	try {
		<FP>
	}
	catch(ParseException e) {
		RecuperacaoErro.recuperaErroPanico(CompiladorHellConstants.COMENT, "fecha parenteses");
    }
	<COMENT>
	{
	  return printa;
	}
}

/*
comandoPega -> <IN><AP><VAR>(<VIRG><VAR>)*<FP><COMENT>
*/
void comandoPega (): {}
{
	<IN>
	try {
		<AP>
	}
	catch(ParseException e) {
		RecuperacaoErro.recuperaErroPanico(CompiladorHellConstants.COMENT, "abre parenteses");
	}
	<VAR>
	(
	  <VIRG><VAR>
	)*
	try {
		<FP>
	}
	catch(ParseException e) {
		RecuperacaoErro.recuperaErroPanico(CompiladorHellConstants.COMENT, "fecha parenteses");
	}
	<COMENT>	
}

/*
comandoSe -> <IF><AP> exp <FP>
             <ACH><COMENT>
             listaComandos <FCH>
             (<ELSE><ACH><COMENT>
             listaComandos <FCH>)?
*/

SeSenao comandoSe() : {Comando seSenao = new SeSenao(); Expressao expSeSenao = new Expressao(); ListaComandos listaComandosCondicaoVerdadeiro = new ListaComandos(); ListaComandos listaComandosCondicaoFalso = new ListaComandos(); }
{  
	<IF> <AP> expSeSenao = exp() <FP>
	{
	  seSenao.setexpSeSenao(expSeSenao);
	}
	<ACH><COMENT>
	listaComandosCondicaoVerdadeiro = listaComandos() <FCH>
	{
	  seSenao.setlistaComandosCondicaoVerdadeiro(listaComandosCondicaoVerdadeiro);
	}
	(
	  <ELSE><ACH><COMENT>
	  listaComandosCondicaoFalso = listaComandos()
	  {
	     seSenao.setlistaComandosCondicaoFalso (listaComandosCondicaoFalso);
	  }
	  <FCH>
	)?

{ return seSenao;}

}

/*
comandoTeste() -> <TEST><ACH> (	blocoCondicional )+
            	  ( <OTHERWISE><ACH> <COMENT>
			        listaComandos()
			        <FCH> 
		          )? <FCH>

blocoCondicional -> <AP> exp <FP> <COMENT>
                    <ACH> listaComandos()
	                <FCH> (<BREAK>)? 
*/

Teste comandoTeste(): {Condicional c; ListaComandos lc; Teste t = new Teste();}
{
	<TEST><ACH>
	(
		c = blocoCondicional()
		{t.addCondicoes(c); }
	)+

	(
		<OTHERWISE><ACH> <COMENT>
	    lc = listaComandos()
	    { t.setOutroCaso(lc); }
	    <FCH> 
	)?
	<FCH>

	{return t;}
}

Condicional blocoCondicional():{Expressao e; ListaComandos lc; Condicional c = new Condicional();}
{
	<AP>
	e = exp()
	{c.setExpressao(e);}
	<FP>
	<ACH> <COMENT>
    lc = listaComandos()
    {c.setListaComandos(lc);}
	<FCH>
	(<BREAK>)?

	{ return c; }
	  
}

/*
comandoLaco -> <FOR> <AP> (<TYPENUM>)? <VAR><ATRIB>
               exp <PT_VIRG>
               exp <PT_VIRG>
               comandoAtribuicao <FP>
               <ACH> <COMENT> listaComandos <FCH>
*/
Comando comandoLaco () : {Simbolo simb; Token var; Token tokenTipo = null; Comando laco = new Laco(); Expressao expressaoAuxiliar = new Expressao(); ListaComandos listaAuxiliar = new ListaComandos();}
{
    <FOR>
    try {
		<AP>
	}
	catch(ParseException e) {
		RecuperacaoErro.recuperaErroPanico(CompiladorHellConstants.ACH, "abre parenteses");
		return null;	
	}
    (
      tokenTipo = <TYPENUM>
    )?
    var=<VAR>
    {
	  if(tokenTipo != null)
	  {
	     simb = new Simbolo(var.image, Tipo.VAR_NUMERO);
	      CompiladorHell.tabela.inclui(simb);
      }
    }
    {
       laco.setvarControle(var);
    }
    <ATRIB> expressaoAuxiliar = exp() <PT_VIRG>
    {
      	laco.setExpressaoInicializacao(expressaoAuxiliar);
  	} 
    expressaoAuxiliar = exp()
    {
      	laco.setExpressaoComparadora(expressaoAuxiliar);
    }
    <PT_VIRG> 
    <VAR>
    <ATRIB> expressaoAuxiliar = exp()
    {
      	laco.setExpressaoIteracao(expressaoAuxiliar);
    }
	
	  
    try {
		<FP>
	}
	catch(ParseException e) {
		RecuperacaoErro.recuperaErroPanico(CompiladorHellConstants.ACH, "fecha parenteses");
        return null;		                                   
	}
    <ACH> <COMENT>
    listaAuxiliar = listaComandos() <FCH>
    {
      	laco.setListaComandos(listaAuxiliar);
    }
    { return laco; }
}

/*
comandoLacoMultiplo -> <FOR_MULTIPLE> <AP> (TYPENUM)inicioLaco <FP>
                <ACH> <COMENT> listaComandos <FCH>
inicioLaco   -> <VAR> contLaco faixa
contLaco     -> <VIRG> <VAR> contLaco faixa <VIRG>
               | <PT_VIRG>
faixa -> exp <TO> exp
        (<STEP> exp)?
*/
LacoMultiplo comandoLacoMultiplo() : {Token tokenTipo = null;LacoMultiplo laco;}
{
	<FORMULTIPLE>
	try {
		<AP>
	}
	catch(ParseException e) {
		RecuperacaoErro.recuperaErroPanico(CompiladorHellConstants.ACH, "fecha parenteses");
        return null;	
	}
	(
      tokenTipo = <TYPENUM>
    )?
	laco = inicioLaco(tokenTipo)
	try {
		<FP>
	}
	catch(ParseException e) {
		RecuperacaoErro.recuperaErroPanico(CompiladorHellConstants.ACH, "fecha parenteses");
        return null;	
	}
	<ACH> <COMENT>
	listaComandos()
	<FCH>
}
LacoMultiplo inicioLaco(Token tokenTipo) : {Simbolo simb; Token var;BlocoLacoMultiplo bloco;}
{
  	
	var=<VAR>
	{
	  LacoMultiplo laco = new LacoMultiplo ();
	  bloco = new BlocoLacoMultiplo(var.image);
	  laco.incluiBloco(bloco);
	  
	  if(tokenTipo!=null)
	  { 
		   simb = new Simbolo(var.image,Tipo.VAR_NUMERO);
	       CompiladorHell.tabela.inclui(simb);
      }
    }
	contLaco(tokenTipo,laco) faixaLacoMultiplo(laco)

	{
	  return laco;
	}
}
void contLaco(Token tokenTipo) : {Simbolo simb; Token var;}
{
	<VIRG>
	var=<VAR>
	{
	  if(tokenTipo!=null)
	  { 
		  simb = new Simbolo(var.image,Tipo.VAR_NUMERO);
	      CompiladorHell.tabela.inclui(simb);
      }
    }
	contLaco(tokenTipo,laco) faixaLacoMultiplo(laco) <VIRG> 
	|
	<PT_VIRG>
}


void faixaLacoMultiplo(LacoMultiplo laco) : {Expressao expFrom,expTo;Expressao expStep = new Expressao();}
{
	auxiliar = exp()
	{expressao.add(auxiliar); }
  	
  	
	expFrom = exp()
	<TO>
	auxiliar = exp()
	{expressao.add(auxiliar); }
	expTo = exp()
	(
	    <STEP> auxiliar = exp()
	    { expressao.add(auxiliar); }
	    <STEP> expStep = exp()
	)?
	{ return expressao; }
	{
	  laco.addFaixa(expFrom,expTo,expStep); //possui um contador interno para controle de insercao das faixas
	}
}

/*
comandoLacoMatrix -> <FORMATRIX> <AP> <VAR>
                    (<VIR> <VAR>)*
	                <PT_VIRG> faixa <FP>
	                <ACH> <COMENT>
	                listaComandos <FCH>	
faixa -> exp <TO> exp
        (<STEP> exp)?
*/
Comando comandoLacoMatrix() : {Simbolo simb; Token var; Token tipo = null;
                               Comando lacoMatrix = new LacoMatrix();
                               Expressao expressaoAuxiliar = new Expressao();
                               ListaComandos listaAuxiliar = new ListaComandos();
                               ArrayList<Expressao> expressao;} 
{
      <FORMATRIX>
      try {
		<AP>
	  }
	  catch(ParseException e) {
		   RecuperacaoErro.recuperaErroPanico(CompiladorHellConstants.ACH, "fecha parenteses");
        return null;	
	  }
      (
      tipo = <TYPENUM>
      )?	
      var=<VAR>
      {
		  if(tipo!=null)
		  {
		    simb = new Simbolo(var.image,Tipo.VAR_NUMERO);
	      	 CompiladorHell.tabela.inclui(simb);
		  }
      }
      { lacoMatrix.setVariaveisControle(var); }
      (
        <VIRG>
       	var=<VAR>
        {
			if(tipo!=null)
			{
			  simb = new Simbolo(var.image,Tipo.VAR_NUMERO);
	      	   CompiladorHell.tabela.inclui(simb);
			}
    	}
    	{ lacoMatrix.setVariaveisControle(var); }
      )*
      <PT_VIRG>
      expressao = faixa()
	  { lacoMatrix.setExpressaoInicial(expressao.get(0)); }
	  { lacoMatrix.setExpressaoFinal(expressao.get(1)); }
	  {
	    if(expressao.size() > 2)
	  	{
	  	  lacoMatrix.setExpressaoPasso(expressao.get(2)); 
	  	}
	  }
      try {
		<FP>
	  }
	  catch(ParseException e) {
		  RecuperacaoErro.recuperaErroPanico(CompiladorHellConstants.ACH, "fecha parenteses");
          return null;	
	  }
      <ACH> <COMENT>
      listaAuxiliar = listaComandos()
      { lacoMatrix.setListaComandos(listaAuxiliar); }
      <FCH>
      { return lacoMatrix; }
}

/*
faixa -> exp <TO> exp
        (<STEP> exp)?
*/
ArrayList<Expressao> faixa(): {ArrayList<Expressao> listaExpressoes = new ArrayList<Expressao>();
                               Expressao e;}
{
   e = exp()  { listExpressoes.add(e); }   <TO>
   e = exp() { listExpressoes.add(e); }
   (
      <STEP>
      e = exp() { listExpressoes.add(e); }
   )?
}

/*
exp           -> expOr   ( <CONCAT>  expOr )*
expOr         -> expAnd   ( <OR>  expAnd )*
expAnd        -> expNot   ( <AND> expNot )*
expNot        -> ( <NOT> )* expRelacional
expRelacional -> expAdit  ( <MAIOR>   expAdit | <MENOR>   expAdit 
                          | <MAIOR_I> expAdit | <MENOR_I> expAdit |
                          | <IGUAL>   expAdit | <DIF>     expAdit )*
expAdit       -> expMult  ( <ADD>  expMult | <SUB> expMult  )*
expMult       -> expPot   ( <MULT> expPot  | <DIV> expPot )*
expPot        -> expToken ( <POT> expPot )?
expToken      -> <NUM> | <ADD><NUM> | <SUB><NUM> | <VAR> | <BOOL> | <STRING> 
                 | <AP> exp <FP>
*/
Expressao exp() : {Expressao e = new Expressao();}
{
    exp0(e)
    {
      return e;
    }    
}
void exp0(Expressao e) : { Item item; Token t;}
{  
    expOr(e)
    (
      t=<CONCAT> expOr(e)
      {  
        item = new Item(Tipo.OPERADOR, t.image);
        e.add(item);
      }
    )*
  
}
void expOr(Expressao e) : {Item item; Token t;}
{
    expAnd()
    (
      t=<OR> expAnd()
      {  
        item = new Item(Tipo.OPERADOR, t.image);
        e.add(item);
      }
    )*
}
void expAnd() : {Item item; Token t;}
{
    expAnds()
    (
       t=<AND> expAnds()
       {  
        item = new Item(Tipo.OPERADOR, t.image);
        e.add(item);
      }
    )*
}
void expAnds() : {Item item; Token t;}
{
    expNot()
    (
       t=<ANDS> expNot()
       {  
        item = new Item(Tipo.OPERADOR, t.image);
        e.add(item);
      }
    )*
}
void expNot() : {Item item; Token t;}
{
    (
       t=<NOT>
       {  
        item = new Item(Tipo.OPERADOR, t.image);
        e.add(item);
      }
    )*
    expRelacional()
}
void expRelacional() : {Item item; Token t;}
{
   expAdit()
   (
       t=<MAIOR>   expAdit()
       {  
        item = new Item(Tipo.OPERADOR, t.image);
        e.add(item);
      }     
     |
       t=<MENOR>   expAdit()
       {  
        item = new Item(Tipo.OPERADOR, t.image);
        e.add(item);
      }     
     |
       t=<MAIOR_I> expAdit()
       {  
        item = new Item(Tipo.OPERADOR, t.image);
        e.add(item);
      }
       
     |
       t=<MENOR_I> expAdit()
       {  
        item = new Item(Tipo.OPERADOR, t.image);
        e.add(item);
      }    
     |
      t=<IGUAL>   expAdit()
       {  
        item = new Item(Tipo.OPERADOR, t.image);
        e.add(item);
      }     
     |
       t=<DIF>     expAdit()
       {  
        item = new Item(Tipo.OPERADOR, t.image);
        e.add(item);
      }  
   )*
}
void expAdit() : {Item item; Token t;}
{
	expMult()
	(
	  t=<ADD> expMult()
	  {  
	        item = new Item(Tipo.OPERADOR, t.image);
	        e.add(item);
	      }  
	  |
	  t=<SUB> expMult()
	  {  
	        item = new Item(Tipo.OPERADOR, t.image);
	        e.add(item);
	      }  
	)*
}  
void expMult() : {Item item; Token t;}
{
	expPot()
	(
	   t=<MULT> expPot()
	   {  
	        item = new Item(Tipo.OPERADOR, t.image);
	        e.add(item);
	      }  
	|
	   t=<DIV>  expPot()
	   {  
	        item = new Item(Tipo.OPERADOR, t.image);
	        e.add(item);
	      }  
	)*
}
void expPot() : {Item item; Token t;}
{
	expToken()
	(
	  t=<POT> expPot()
	  {  
	        item = new Item(Tipo.OPERADOR, t.image);
	        e.add(item);
	      }  
	)?
}
void expToken(Expressao e) :{Item item; Token t; String tConcatenada;}
{
    t = <NUM>
    {
       item = new Item(Tipo.CTE_NUMERICA, t.image);
       e.add(item);
    }
      
    |
      t=<ADD>
      { tConcatenada = t.image; }      t=<NUM>
      {
         tconcatenada = tconcatenada + t.image; 
         item = new Item(Tipo.CTE_NUMERICA, tConcatenada);
         e.add(item);
      }
      
    |
      t=<SUB>
      { tConcatenada = t.image; }
      t=<NUM>
      {
         tconcatenada = tconcatenada + t.image; 
         item = new Item(Tipo.CTE_NUMERICA, tConcatenada);
         e.add(item);
      }
    |
      <VAR>
    |
      t=<BOOL>
      {
        item = new Item(Tipo.CTE_BOOLEANO, t.image);
        e.add(item);
      }
    |
      t=<STRING>
      {
        item = new Item(Tipo.CTE_STRING, t.image);
        e.add(item);
      }
    |
      t=<AP>
      {
        item = new Item(Tipo.PARENTESES, t.image);
        e.add(item);
      }
      exp0()
      
      t=<FP>
	  {
        item = new Item(Tipo.PARENTESES, t.image);
        e.add(item);
      } 
    {
      e.gerarPosfixo();
    }
}

